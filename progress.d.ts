/* eslint:disable */
/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Structured data object that can contain all information about submissions of a course (or part of a course) plus the requirements to pass the course (or part of a course)
 */
export interface CourseProgressData {
    /**
     * Pointer to the schema against which this document should be validated (Schema URL/path)
     */
    $schema?: string
    /**
     * All exercises of the course
     */
    exercises: CourseExercise[]
    /**
     * Course name
     */
    name: string
    predictions?: CoursePredictions
    /**
     * Name of the course progress that is represented by the data when inserted in a markdown file for visualization (this allows for multiple such data files of the same course)
     */
    progressName: string
    requirements?: CourseRequirements
    /**
     * Version of the progress updater
     */
    version: number
}
/**
 * Represents a collection of tasks that is submitted at once
 */
export interface CourseExercise {
    /**
     * Optionally a directory of the exercise
     */
    directory?: string
    /**
     * An optional file path (relative to the submission directory) to a file that contains feedback information about all tasks of the exercise (can be left out when not yet known, if never submitted or if not existing)
     */
    feedbackFile?: string
    /**
     * An optional name of the exercise
     */
    name?: string
    /**
     * Exercise notes
     */
    notes?: string
    /**
     * The number of the exercise
     */
    number: number
    /**
     * Tracks the progress of the submission either as one summary of all tasks or as a list of single tasks
     */
    submission?: CourseExerciseTaskSubmission[] | CourseExerciseTaskSubmissionSummary
    /**
     * Optionally a submission date of the exercise (run `node` and then `new Date(new Date().toDateString())` or `new Date(new Date(YEAR, MONTH - 1, DATE).toDateString())`
     */
    submissionDate?: string
}
/**
 * Represents one task of all tasks of the exercise
 */
export interface CourseExerciseTaskSubmission {
    /**
     * The total achieved points of this task of the exercise (can be left out when not yet known or if never submitted)
     */
    achievedPoints?: number
    /**
     * Optionally a directory of the exercise
     */
    directory?: string
    /**
     * An optional file path (relative to the submission directory) to a file that contains feedback information about this task of the exercise (can be left out when not yet known, if never submitted or if not existing)
     */
    feedbackFile?: string
    /**
     * An optional name of this task of the exercise
     */
    name?: string
    /**
     * An optional information that can be set to true if this task of the exercise was never submitted
     */
    notSubmitted?: boolean
    /**
     * The maximum points of this task of the exercise
     */
    points: number
}
/**
 * Represents a summary of all tasks of the exercise
 */
export interface CourseExerciseTaskSubmissionSummary {
    /**
     * The total achieved points of all tasks of the exercise (can be left out when not yet known or if never submitted)
     */
    achievedPoints?: number
    /**
     * An optional information that can be set to true if all tasks of the exercise were never submitted
     */
    notSubmitted?: boolean
    /**
     * The maximum points of all tasks of the exercise
     */
    points: number
}
/**
 * Predictions that should be enabled for the visualization
 */
export interface CoursePredictions {
    /**
     * If set shows for not submitted exercises the number of points that are necessary to pass
     */
    enableNumberOfPointsToPass?: boolean
}
/**
 * Requirements to pass course
 */
export interface CourseRequirements {
    /**
     * If set checks if the given minimum points was achieved over all submissions
     */
    minimumPointsAllSubmissions?: number
    /**
     * If set checks if the given minimum points was achieved for each submission
     */
    minimumPointsPerSubmission?: number
    /**
     * If set checks if the given minimum points percentage (0.0 - 1.0) was achieved over all submissions
     */
    minimumPointsPercentageAllSubmissions?: number
    /**
     * If set checks if the given minimum points percentage (0.0 - 1.0) was achieved for each submission
     */
    minimumPointsPercentagePerSubmission?: number
    /**
     * If set checks if the given minimum submission count was achieved over all submissions
     */
    minimumSubmissions?: number
    /**
     * If set checks if the given minimum submission count percentage (0.0 - 1.0) was achieved over all submissions
     */
    minimumSubmissionsPercentage?: number
}
